{"version":3,"file":"azure-functions.min.js","mappings":"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","sources":["webpack://@azure/functions/./src/InvocationContext.ts","webpack://@azure/functions/./src/InvocationModel.ts","webpack://@azure/functions/./src/ProgrammingModel.ts","webpack://@azure/functions/./src/addBindingName.ts","webpack://@azure/functions/./src/app.ts","webpack://@azure/functions/./src/constants.ts","webpack://@azure/functions/./src/converters/fromRpcBindings.ts","webpack://@azure/functions/./src/converters/fromRpcContext.ts","webpack://@azure/functions/./src/converters/fromRpcNullable.ts","webpack://@azure/functions/./src/converters/fromRpcTriggerMetadata.ts","webpack://@azure/functions/./src/converters/fromRpcTypedData.ts","webpack://@azure/functions/./src/converters/toCamelCase.ts","webpack://@azure/functions/./src/converters/toCoreFunctionMetadata.ts","webpack://@azure/functions/./src/converters/toRpcDuration.ts","webpack://@azure/functions/./src/converters/toRpcHttp.ts","webpack://@azure/functions/./src/converters/toRpcHttpCookie.ts","webpack://@azure/functions/./src/converters/toRpcNullable.ts","webpack://@azure/functions/./src/converters/toRpcTypedData.ts","webpack://@azure/functions/./src/errors.ts","webpack://@azure/functions/./src/hooks/AppStartContext.ts","webpack://@azure/functions/./src/hooks/AppTerminateContext.ts","webpack://@azure/functions/./src/hooks/HookContext.ts","webpack://@azure/functions/./src/hooks/InvocationHookContext.ts","webpack://@azure/functions/./src/hooks/LogHookContext.ts","webpack://@azure/functions/./src/hooks/PostInvocationContext.ts","webpack://@azure/functions/./src/hooks/PreInvocationContext.ts","webpack://@azure/functions/./src/hooks/registerHook.ts","webpack://@azure/functions/./src/http/HttpRequest.ts","webpack://@azure/functions/./src/http/HttpResponse.ts","webpack://@azure/functions/./src/http/extractHttpUserFromHeaders.ts","webpack://@azure/functions/./src/http/httpProxy.ts","webpack://@azure/functions/./src/index.ts","webpack://@azure/functions/./src/input.ts","webpack://@azure/functions/./src/output.ts","webpack://@azure/functions/./src/setup.ts","webpack://@azure/functions/./src/trigger.ts","webpack://@azure/functions/./src/utils/Disposable.ts","webpack://@azure/functions/./src/utils/fallbackLogHandler.ts","webpack://@azure/functions/./src/utils/getRandomHexString.ts","webpack://@azure/functions/./src/utils/isTrigger.ts","webpack://@azure/functions/./src/utils/nonNull.ts","webpack://@azure/functions/./src/utils/tryGetCoreApiLazy.ts","webpack://@azure/functions/./src/utils/workerSystemLog.ts","webpack://@azure/functions/external commonjs2 \"@azure/functions-core\"","webpack://@azure/functions/external commonjs2 \"cookie\"","webpack://@azure/functions/external commonjs2 \"crypto\"","webpack://@azure/functions/external commonjs2 \"events\"","webpack://@azure/functions/external commonjs2 \"http\"","webpack://@azure/functions/external commonjs2 \"undici\"","webpack://@azure/functions/external commonjs2 \"url\"","webpack://@azure/functions/external commonjs2 \"util\"","webpack://@azure/functions/webpack/bootstrap","webpack://@azure/functions/webpack/startup"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport {\r\n    EffectiveFunctionOptions,\r\n    InvocationContextInit,\r\n    LogHandler,\r\n    RetryContext,\r\n    TraceContext,\r\n    TriggerMetadata,\r\n} from '@azure/functions';\r\nimport { fallbackLogHandler } from './utils/fallbackLogHandler';\r\n\r\nexport class InvocationContext implements types.InvocationContext {\r\n    invocationId: string;\r\n    functionName: string;\r\n    extraInputs: InvocationContextExtraInputs;\r\n    extraOutputs: InvocationContextExtraOutputs;\r\n    retryContext?: RetryContext;\r\n    traceContext?: TraceContext;\r\n    triggerMetadata?: TriggerMetadata;\r\n    options: EffectiveFunctionOptions;\r\n    #userLogHandler: LogHandler;\r\n\r\n    constructor(init?: InvocationContextInit) {\r\n        init = init || {};\r\n        const fallbackString = 'unknown';\r\n        this.invocationId = init.invocationId || fallbackString;\r\n        this.functionName = init.functionName || fallbackString;\r\n        this.extraInputs = new InvocationContextExtraInputs();\r\n        this.extraOutputs = new InvocationContextExtraOutputs();\r\n        this.retryContext = init.retryContext;\r\n        this.traceContext = init.traceContext;\r\n        this.triggerMetadata = init.triggerMetadata;\r\n        this.options = {\r\n            trigger: init.options?.trigger || {\r\n                name: fallbackString,\r\n                type: fallbackString,\r\n            },\r\n            return: init.options?.return,\r\n            extraInputs: init.options?.extraInputs || [],\r\n            extraOutputs: init.options?.extraOutputs || [],\r\n        };\r\n        this.#userLogHandler = init.logHandler || fallbackLogHandler;\r\n    }\r\n\r\n    log(...args: unknown[]): void {\r\n        this.#userLogHandler('information', ...args);\r\n    }\r\n\r\n    trace(...args: unknown[]): void {\r\n        this.#userLogHandler('trace', ...args);\r\n    }\r\n\r\n    debug(...args: unknown[]): void {\r\n        this.#userLogHandler('debug', ...args);\r\n    }\r\n\r\n    info(...args: unknown[]): void {\r\n        this.#userLogHandler('information', ...args);\r\n    }\r\n\r\n    warn(...args: unknown[]): void {\r\n        this.#userLogHandler('warning', ...args);\r\n    }\r\n\r\n    error(...args: unknown[]): void {\r\n        this.#userLogHandler('error', ...args);\r\n    }\r\n}\r\n\r\nclass InvocationContextExtraInputs implements types.InvocationContextExtraInputs {\r\n    #inputs: Record<string, unknown> = {};\r\n    get(inputOrName: types.FunctionInput | string): any {\r\n        const name = typeof inputOrName === 'string' ? inputOrName : inputOrName.name;\r\n        return this.#inputs[name];\r\n    }\r\n    set(inputOrName: types.FunctionInput | string, value: unknown): void {\r\n        const name = typeof inputOrName === 'string' ? inputOrName : inputOrName.name;\r\n        this.#inputs[name] = value;\r\n    }\r\n}\r\n\r\nclass InvocationContextExtraOutputs implements types.InvocationContextExtraOutputs {\r\n    #outputs: Record<string, unknown> = {};\r\n    get(outputOrName: types.FunctionOutput | string): unknown {\r\n        const name = typeof outputOrName === 'string' ? outputOrName : outputOrName.name;\r\n        return this.#outputs[name];\r\n    }\r\n    set(outputOrName: types.FunctionOutput | string, value: unknown): void {\r\n        const name = typeof outputOrName === 'string' ? outputOrName : outputOrName.name;\r\n        this.#outputs[name] = value;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport {\r\n    CoreInvocationContext,\r\n    InvocationArguments,\r\n    RpcBindingInfo,\r\n    RpcInvocationResponse,\r\n    RpcLogCategory,\r\n    RpcLogLevel,\r\n    RpcTypedData,\r\n} from '@azure/functions-core';\r\nimport { format } from 'util';\r\nimport { returnBindingKey } from './constants';\r\nimport { fromRpcBindings } from './converters/fromRpcBindings';\r\nimport { fromRpcRetryContext, fromRpcTraceContext } from './converters/fromRpcContext';\r\nimport { fromRpcTriggerMetadata } from './converters/fromRpcTriggerMetadata';\r\nimport { fromRpcTypedData } from './converters/fromRpcTypedData';\r\nimport { toCamelCaseValue } from './converters/toCamelCase';\r\nimport { toRpcHttp } from './converters/toRpcHttp';\r\nimport { toRpcTypedData } from './converters/toRpcTypedData';\r\nimport { AzFuncSystemError } from './errors';\r\nimport { waitForProxyRequest } from './http/httpProxy';\r\nimport { createStreamRequest } from './http/HttpRequest';\r\nimport { InvocationContext } from './InvocationContext';\r\nimport { enableHttpStream } from './setup';\r\nimport { isHttpTrigger, isTimerTrigger, isTrigger } from './utils/isTrigger';\r\nimport { isDefined, nonNullProp, nonNullValue } from './utils/nonNull';\r\n\r\nexport class InvocationModel implements coreTypes.InvocationModel {\r\n    #isDone = false;\r\n    #coreCtx: CoreInvocationContext;\r\n    #functionName: string;\r\n    #bindings: Record<string, RpcBindingInfo>;\r\n    #triggerType: string;\r\n\r\n    constructor(coreCtx: CoreInvocationContext) {\r\n        this.#coreCtx = coreCtx;\r\n        this.#functionName = nonNullProp(coreCtx.metadata, 'name');\r\n        this.#bindings = nonNullProp(coreCtx.metadata, 'bindings');\r\n        const triggerBinding = nonNullValue(\r\n            Object.values(this.#bindings).find((b) => isTrigger(b.type)),\r\n            'triggerBinding'\r\n        );\r\n        this.#triggerType = nonNullProp(triggerBinding, 'type');\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    async getArguments(): Promise<InvocationArguments> {\r\n        const req = this.#coreCtx.request;\r\n\r\n        const context = new InvocationContext({\r\n            invocationId: nonNullProp(this.#coreCtx, 'invocationId'),\r\n            functionName: this.#functionName,\r\n            logHandler: (level: RpcLogLevel, ...args: unknown[]) => this.#userLog(level, ...args),\r\n            retryContext: fromRpcRetryContext(req.retryContext),\r\n            traceContext: fromRpcTraceContext(req.traceContext),\r\n            triggerMetadata: fromRpcTriggerMetadata(req.triggerMetadata, this.#triggerType),\r\n            options: fromRpcBindings(this.#bindings),\r\n        });\r\n\r\n        const inputs: unknown[] = [];\r\n        if (req.inputData) {\r\n            for (const binding of req.inputData) {\r\n                const bindingName = nonNullProp(binding, 'name');\r\n\r\n                const rpcBinding = this.#bindings[bindingName];\r\n                if (!rpcBinding) {\r\n                    throw new AzFuncSystemError(\r\n                        `Failed to find binding \"${bindingName}\" in bindings \"${Object.keys(this.#bindings).join(\r\n                            ', '\r\n                        )}\".`\r\n                    );\r\n                }\r\n                const bindingType = rpcBinding.type;\r\n\r\n                let input: unknown;\r\n                if (isHttpTrigger(bindingType) && enableHttpStream) {\r\n                    const proxyRequest = await waitForProxyRequest(this.#coreCtx.invocationId);\r\n                    input = createStreamRequest(proxyRequest, nonNullProp(req, 'triggerMetadata'));\r\n                } else {\r\n                    input = fromRpcTypedData(binding.data);\r\n                }\r\n\r\n                if (isTimerTrigger(bindingType)) {\r\n                    input = toCamelCaseValue(input);\r\n                }\r\n\r\n                if (isTrigger(bindingType)) {\r\n                    inputs.push(input);\r\n                } else {\r\n                    context.extraInputs.set(bindingName, input);\r\n                }\r\n            }\r\n        }\r\n\r\n        return { context, inputs };\r\n    }\r\n\r\n    async invokeFunction(\r\n        context: InvocationContext,\r\n        inputs: unknown[],\r\n        handler: coreTypes.FunctionCallback\r\n    ): Promise<unknown> {\r\n        try {\r\n            return await Promise.resolve(handler(...inputs, context));\r\n        } finally {\r\n            this.#isDone = true;\r\n        }\r\n    }\r\n\r\n    async getResponse(context: InvocationContext, result: unknown): Promise<RpcInvocationResponse> {\r\n        const response: RpcInvocationResponse = { invocationId: this.#coreCtx.invocationId };\r\n\r\n        response.outputData = [];\r\n        let usedReturnValue = false;\r\n        for (const [name, binding] of Object.entries(this.#bindings)) {\r\n            if (binding.direction === 'out') {\r\n                if (name === returnBindingKey) {\r\n                    response.returnValue = await this.#convertOutput(context.invocationId, binding, result);\r\n                    usedReturnValue = true;\r\n                } else {\r\n                    const outputValue = await this.#convertOutput(\r\n                        context.invocationId,\r\n                        binding,\r\n                        context.extraOutputs.get(name)\r\n                    );\r\n                    if (isDefined(outputValue)) {\r\n                        response.outputData.push({ name, data: outputValue });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // This allows the return value of non-HTTP triggered functions to be passed back\r\n        // to the host, even if no explicit output binding is set. In most cases, this is ignored,\r\n        // but e.g., Durable uses this to pass orchestrator state back to the Durable extension, w/o\r\n        // an explicit output binding. See here for more details: https://github.com/Azure/azure-functions-nodejs-library/pull/25\r\n        if (!usedReturnValue && !isHttpTrigger(this.#triggerType)) {\r\n            response.returnValue = toRpcTypedData(result);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    async #convertOutput(\r\n        invocationId: string,\r\n        binding: RpcBindingInfo,\r\n        value: unknown\r\n    ): Promise<RpcTypedData | null | undefined> {\r\n        if (binding.type?.toLowerCase() === 'http') {\r\n            return toRpcHttp(invocationId, value);\r\n        } else {\r\n            return toRpcTypedData(value);\r\n        }\r\n    }\r\n\r\n    #log(level: RpcLogLevel, logCategory: RpcLogCategory, ...args: unknown[]): void {\r\n        this.#coreCtx.log(level, logCategory, format(...args));\r\n    }\r\n\r\n    #systemLog(level: RpcLogLevel, ...args: unknown[]) {\r\n        this.#log(level, 'system', ...args);\r\n    }\r\n\r\n    #userLog(level: RpcLogLevel, ...args: unknown[]): void {\r\n        if (this.#isDone && this.#coreCtx.state !== 'postInvocationHooks') {\r\n            let badAsyncMsg =\r\n                \"Warning: Unexpected call to 'log' on the context object after function execution has completed. Please check for asynchronous calls that are not awaited. \";\r\n            badAsyncMsg += `Function name: ${this.#functionName}. Invocation Id: ${this.#coreCtx.invocationId}.`;\r\n            this.#systemLog('warning', badAsyncMsg);\r\n        }\r\n        this.#log(level, 'user', ...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { CoreInvocationContext, WorkerCapabilities } from '@azure/functions-core';\r\nimport { version } from './constants';\r\nimport { setupHttpProxy } from './http/httpProxy';\r\nimport { InvocationModel } from './InvocationModel';\r\nimport { capabilities as libraryCapabilities, enableHttpStream, lockSetup } from './setup';\r\n\r\nexport class ProgrammingModel implements coreTypes.ProgrammingModel {\r\n    name = '@azure/functions';\r\n    version = version;\r\n\r\n    getInvocationModel(coreCtx: CoreInvocationContext): InvocationModel {\r\n        return new InvocationModel(coreCtx);\r\n    }\r\n\r\n    async getCapabilities(workerCapabilities: WorkerCapabilities): Promise<WorkerCapabilities> {\r\n        lockSetup();\r\n\r\n        if (enableHttpStream) {\r\n            const httpUri = await setupHttpProxy();\r\n            workerCapabilities.HttpUri = httpUri;\r\n        }\r\n\r\n        Object.assign(workerCapabilities, libraryCapabilities);\r\n\r\n        return workerCapabilities;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { getStringHash } from './utils/getRandomHexString';\r\n\r\n/**\r\n * If the host spawns multiple workers, it expects the metadata (including binding name) to be the same across workers.\r\n * That means we need to generate binding names in a deterministic fashion, so we'll do that using a string hash of the binding data\r\n * A few considerations:\r\n * 1. We will include the binding type in the name to make it more readable\r\n * 2. Users can manually specify the name themselves and we will respect that\r\n * 3. The only time the hash should cause a conflict is if a single function has duplicate bindings. Not sure why someone would do that, but we will throw an error at function registration time\r\n * More info here: https://github.com/Azure/azure-functions-nodejs-worker/issues/638\r\n */\r\nexport function addBindingName<T extends { type: string; name?: string }>(\r\n    binding: T,\r\n    suffix: string\r\n): T & { name: string } {\r\n    if (!binding.name) {\r\n        let bindingType = binding.type;\r\n        if (!bindingType.toLowerCase().endsWith(suffix.toLowerCase())) {\r\n            bindingType += suffix;\r\n        }\r\n        binding.name = bindingType + getStringHash(JSON.stringify(binding));\r\n    }\r\n    return <T & { name: string }>binding;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBFunctionOptions,\r\n    EventGridFunctionOptions,\r\n    EventHubFunctionOptions,\r\n    FunctionTrigger,\r\n    GenericFunctionOptions,\r\n    HttpFunctionOptions,\r\n    HttpHandler,\r\n    HttpMethod,\r\n    HttpMethodFunctionOptions,\r\n    ServiceBusQueueFunctionOptions,\r\n    ServiceBusTopicFunctionOptions,\r\n    SqlFunctionOptions,\r\n    StorageBlobFunctionOptions,\r\n    StorageQueueFunctionOptions,\r\n    TimerFunctionOptions,\r\n    WarmupFunctionOptions,\r\n} from '@azure/functions';\r\nimport { FunctionCallback } from '@azure/functions-core';\r\nimport { toCoreFunctionMetadata } from './converters/toCoreFunctionMetadata';\r\nimport * as output from './output';\r\nimport { ProgrammingModel } from './ProgrammingModel';\r\nimport * as trigger from './trigger';\r\nimport { tryGetCoreApiLazy } from './utils/tryGetCoreApiLazy';\r\n\r\nexport * as hook from './hooks/registerHook';\r\nexport { setup } from './setup';\r\n\r\nlet hasSetModel = false;\r\nfunction setProgrammingModel() {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            'WARNING: Failed to detect the Azure Functions runtime. Switching \"@azure/functions\" package to test mode - not all features are supported.'\r\n        );\r\n    } else {\r\n        coreApi.setProgrammingModel(new ProgrammingModel());\r\n    }\r\n    hasSetModel = true;\r\n}\r\n\r\nfunction convertToHttpOptions(\r\n    optionsOrHandler: HttpFunctionOptions | HttpHandler,\r\n    method: HttpMethod\r\n): HttpFunctionOptions {\r\n    const options: HttpFunctionOptions =\r\n        typeof optionsOrHandler === 'function' ? { handler: optionsOrHandler } : optionsOrHandler;\r\n    options.methods = [method];\r\n    return options;\r\n}\r\n\r\nfunction convertToGenericOptions<T extends Omit<GenericFunctionOptions, 'trigger'> & Partial<GenericFunctionOptions>>(\r\n    options: T,\r\n    triggerMethod: (\r\n        o: Omit<T, 'handler' | 'return' | 'trigger' | 'extraInputs' | 'extraOutputs' | 'retry'>\r\n    ) => FunctionTrigger\r\n): GenericFunctionOptions {\r\n    const { handler, return: ret, trigger, extraInputs, extraOutputs, retry, ...triggerOptions } = options;\r\n    return {\r\n        trigger: trigger ?? triggerMethod(triggerOptions),\r\n        return: ret,\r\n        retry,\r\n        extraInputs,\r\n        extraOutputs,\r\n        handler,\r\n    };\r\n}\r\n\r\nexport function get(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'GET'));\r\n}\r\n\r\nexport function put(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'PUT'));\r\n}\r\n\r\nexport function post(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'POST'));\r\n}\r\n\r\nexport function patch(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'PATCH'));\r\n}\r\n\r\nexport function deleteRequest(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'DELETE'));\r\n}\r\n\r\nexport function http(name: string, options: HttpFunctionOptions): void {\r\n    options.return ||= output.http({});\r\n    generic(name, convertToGenericOptions(options, trigger.http));\r\n}\r\n\r\nexport function timer(name: string, options: TimerFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.timer));\r\n}\r\n\r\nexport function storageBlob(name: string, options: StorageBlobFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.storageBlob));\r\n}\r\n\r\nexport function storageQueue(name: string, options: StorageQueueFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.storageQueue));\r\n}\r\n\r\nexport function serviceBusQueue(name: string, options: ServiceBusQueueFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.serviceBusQueue));\r\n}\r\n\r\nexport function serviceBusTopic(name: string, options: ServiceBusTopicFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.serviceBusTopic));\r\n}\r\n\r\nexport function eventHub(name: string, options: EventHubFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.eventHub));\r\n}\r\n\r\nexport function eventGrid(name: string, options: EventGridFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.eventGrid));\r\n}\r\n\r\nexport function cosmosDB(name: string, options: CosmosDBFunctionOptions): void {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    generic(name, convertToGenericOptions(options, <any>trigger.cosmosDB));\r\n}\r\n\r\nexport function warmup(name: string, options: WarmupFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.warmup));\r\n}\r\n\r\nexport function sql(name: string, options: SqlFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.sql));\r\n}\r\n\r\nexport function generic(name: string, options: GenericFunctionOptions): void {\r\n    if (!hasSetModel) {\r\n        setProgrammingModel();\r\n    }\r\n\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            `WARNING: Skipping call to register function \"${name}\" because the \"@azure/functions\" package is in test mode.`\r\n        );\r\n    } else {\r\n        coreApi.registerFunction(toCoreFunctionMetadata(name, options), <FunctionCallback>options.handler);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport const version = '4.5.0';\r\n\r\nexport const returnBindingKey = '$return';\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { EffectiveFunctionOptions, FunctionInput, FunctionOutput, FunctionTrigger } from '@azure/functions';\r\nimport { RpcBindingInfo } from '@azure/functions-core';\r\nimport { returnBindingKey } from '../constants';\r\nimport { isTrigger } from '../utils/isTrigger';\r\nimport { nonNullProp, nonNullValue } from '../utils/nonNull';\r\n\r\nexport function fromRpcBindings(bindings: Record<string, RpcBindingInfo> | null | undefined): EffectiveFunctionOptions {\r\n    let trigger: FunctionTrigger | undefined;\r\n    let returnBinding: FunctionOutput | undefined;\r\n    const extraInputs: FunctionInput[] = [];\r\n    const extraOutputs: FunctionOutput[] = [];\r\n    for (const [name, binding] of Object.entries(nonNullValue(bindings, 'bindings'))) {\r\n        if (isTrigger(binding.type)) {\r\n            trigger = fromRpcBinding(name, binding);\r\n        } else if (name === returnBindingKey) {\r\n            returnBinding = fromRpcBinding(name, binding);\r\n        } else if (binding.direction === 'in') {\r\n            extraInputs.push(fromRpcBinding(name, binding));\r\n        } else if (binding.direction === 'out') {\r\n            extraOutputs.push(fromRpcBinding(name, binding));\r\n        }\r\n    }\r\n    return {\r\n        trigger: nonNullValue(trigger, 'trigger'),\r\n        return: returnBinding,\r\n        extraInputs,\r\n        extraOutputs,\r\n    };\r\n}\r\n\r\nfunction fromRpcBinding(name: string, binding: RpcBindingInfo): FunctionTrigger | FunctionInput | FunctionOutput {\r\n    return {\r\n        ...binding,\r\n        type: nonNullProp(binding, 'type'),\r\n        name,\r\n    };\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Exception, RetryContext, TraceContext } from '@azure/functions';\r\nimport { RpcException, RpcRetryContext, RpcTraceContext } from '@azure/functions-core';\r\nimport { copyPropIfDefined, nonNullProp } from '../utils/nonNull';\r\n\r\nexport function fromRpcRetryContext(retryContext: RpcRetryContext | null | undefined): RetryContext | undefined {\r\n    if (!retryContext) {\r\n        return undefined;\r\n    } else {\r\n        const result: RetryContext = {\r\n            retryCount: nonNullProp(retryContext, 'retryCount'),\r\n            maxRetryCount: nonNullProp(retryContext, 'maxRetryCount'),\r\n        };\r\n        if (retryContext.exception) {\r\n            result.exception = fromRpcException(retryContext.exception);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction fromRpcException(exception: RpcException): Exception {\r\n    const result: Exception = {};\r\n    copyPropIfDefined(exception, result, 'message');\r\n    copyPropIfDefined(exception, result, 'source');\r\n    copyPropIfDefined(exception, result, 'stackTrace');\r\n    return result;\r\n}\r\n\r\nexport function fromRpcTraceContext(traceContext: RpcTraceContext | null | undefined): TraceContext | undefined {\r\n    if (!traceContext) {\r\n        return undefined;\r\n    } else {\r\n        const result: TraceContext = {};\r\n        copyPropIfDefined(traceContext, result, 'traceParent');\r\n        copyPropIfDefined(traceContext, result, 'traceState');\r\n        if (traceContext.attributes) {\r\n            result.attributes = traceContext.attributes;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcNullableString } from '@azure/functions-core';\r\n\r\nexport function fromNullableMapping(\r\n    nullableMapping: Record<string, RpcNullableString> | null | undefined,\r\n    originalMapping?: Record<string, string> | null\r\n): Record<string, string> {\r\n    let converted: Record<string, string> = {};\r\n    if (nullableMapping && Object.keys(nullableMapping).length > 0) {\r\n        for (const key in nullableMapping) {\r\n            converted[key] = nullableMapping[key]?.value || '';\r\n        }\r\n    } else if (originalMapping && Object.keys(originalMapping).length > 0) {\r\n        converted = originalMapping;\r\n    }\r\n    return converted;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { TriggerMetadata } from '@azure/functions';\r\nimport { RpcTypedData } from '@azure/functions-core';\r\nimport { isHttpTrigger, isTimerTrigger } from '../utils/isTrigger';\r\nimport { fromRpcTypedData } from './fromRpcTypedData';\r\nimport { toCamelCaseKey, toCamelCaseValue } from './toCamelCase';\r\n\r\nexport function fromRpcTriggerMetadata(\r\n    triggerMetadata: Record<string, RpcTypedData> | null | undefined,\r\n    triggerType: string\r\n): TriggerMetadata | undefined {\r\n    // For http and timer triggers, we will avoid using `triggerMetadata` for a few reasons:\r\n    // 1. It uses `toCamelCase` methods, which can lead to weird casing bugs\r\n    // 2. It's generally a large medley of properties that is difficult for us to document/type\r\n    // 3. We can represent that information on the request & timer objects instead\r\n    if (!triggerMetadata || isHttpTrigger(triggerType) || isTimerTrigger(triggerType)) {\r\n        return undefined;\r\n    } else {\r\n        const result: TriggerMetadata = {};\r\n        for (const [key, value] of Object.entries(triggerMetadata)) {\r\n            result[toCamelCaseKey(key)] = toCamelCaseValue(fromRpcTypedData(value));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcTypedData } from '@azure/functions-core';\r\nimport { HttpRequest } from '../http/HttpRequest';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\nexport function fromRpcTypedData(data: RpcTypedData | null | undefined): unknown {\r\n    if (!data) {\r\n        return undefined;\r\n    } else if (isDefined(data.string)) {\r\n        return tryJsonParse(data.string);\r\n    } else if (isDefined(data.json)) {\r\n        return JSON.parse(data.json);\r\n    } else if (isDefined(data.bytes)) {\r\n        return Buffer.from(data.bytes);\r\n    } else if (isDefined(data.stream)) {\r\n        return Buffer.from(data.stream);\r\n    } else if (isDefined(data.http)) {\r\n        return new HttpRequest(data.http);\r\n    } else if (isDefined(data.int)) {\r\n        return data.int;\r\n    } else if (isDefined(data.double)) {\r\n        return data.double;\r\n    } else if (data.collectionBytes && isDefined(data.collectionBytes.bytes)) {\r\n        return data.collectionBytes.bytes.map((d) => Buffer.from(d));\r\n    } else if (data.collectionString && isDefined(data.collectionString.string)) {\r\n        return data.collectionString.string.map(tryJsonParse);\r\n    } else if (data.collectionDouble && isDefined(data.collectionDouble.double)) {\r\n        return data.collectionDouble.double;\r\n    } else if (data.collectionSint64 && isDefined(data.collectionSint64.sint64)) {\r\n        return data.collectionSint64.sint64;\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nfunction tryJsonParse(data: string): unknown {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch {\r\n        return data;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function toCamelCaseValue(data: unknown): unknown {\r\n    if (typeof data !== 'object' || data === null) {\r\n        return data;\r\n    } else if (Array.isArray(data)) {\r\n        return data.map(toCamelCaseValue);\r\n    } else {\r\n        const result: Record<string, unknown> = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            result[toCamelCaseKey(key)] = toCamelCaseValue(value);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function toCamelCaseKey(key: string): string {\r\n    return key.charAt(0).toLowerCase() + key.slice(1);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { ExponentialBackoffRetryOptions, FixedDelayRetryOptions, GenericFunctionOptions } from '@azure/functions';\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { returnBindingKey } from '../constants';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isTrigger } from '../utils/isTrigger';\r\nimport { toRpcDuration } from './toRpcDuration';\r\n\r\nexport function toCoreFunctionMetadata(name: string, options: GenericFunctionOptions): coreTypes.FunctionMetadata {\r\n    const bindings: Record<string, coreTypes.RpcBindingInfo> = {};\r\n    const bindingNames: string[] = [];\r\n\r\n    const trigger = options.trigger;\r\n    bindings[trigger.name] = {\r\n        ...trigger,\r\n        direction: 'in',\r\n        type: isTrigger(trigger.type) ? trigger.type : trigger.type + 'Trigger',\r\n    };\r\n    bindingNames.push(trigger.name);\r\n\r\n    if (options.extraInputs) {\r\n        for (const input of options.extraInputs) {\r\n            bindings[input.name] = {\r\n                ...input,\r\n                direction: 'in',\r\n            };\r\n            bindingNames.push(input.name);\r\n        }\r\n    }\r\n\r\n    if (options.return) {\r\n        bindings[returnBindingKey] = {\r\n            ...options.return,\r\n            direction: 'out',\r\n        };\r\n        bindingNames.push(returnBindingKey);\r\n    }\r\n\r\n    if (options.extraOutputs) {\r\n        for (const output of options.extraOutputs) {\r\n            bindings[output.name] = {\r\n                ...output,\r\n                direction: 'out',\r\n            };\r\n            bindingNames.push(output.name);\r\n        }\r\n    }\r\n\r\n    const dupeBindings = bindingNames.filter((v, i) => bindingNames.indexOf(v) !== i);\r\n    if (dupeBindings.length > 0) {\r\n        throw new AzFuncSystemError(\r\n            `Duplicate bindings found for function \"${name}\". Remove a duplicate binding or manually specify the \"name\" property to make it unique.`\r\n        );\r\n    }\r\n\r\n    let retryOptions: coreTypes.RpcRetryOptions | undefined;\r\n    if (options.retry) {\r\n        retryOptions = {\r\n            ...options.retry,\r\n            retryStrategy: options.retry.strategy,\r\n            delayInterval: toRpcDuration((<FixedDelayRetryOptions>options.retry).delayInterval, 'retry.delayInterval'),\r\n            maximumInterval: toRpcDuration(\r\n                (<ExponentialBackoffRetryOptions>options.retry).maximumInterval,\r\n                'retry.maximumInterval'\r\n            ),\r\n            minimumInterval: toRpcDuration(\r\n                (<ExponentialBackoffRetryOptions>options.retry).minimumInterval,\r\n                'retry.minimumInterval'\r\n            ),\r\n        };\r\n    }\r\n\r\n    return { name, bindings, retryOptions };\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcDuration } from '@azure/functions-core';\r\nimport { Duration } from '../../types';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\nexport function toRpcDuration(dateTime: Duration | number | undefined, propertyName: string): RpcDuration | undefined {\r\n    if (isDefined(dateTime)) {\r\n        try {\r\n            let timeInMilliseconds: number | undefined;\r\n            if (typeof dateTime === 'object') {\r\n                const minutes = (dateTime.minutes || 0) + (dateTime.hours || 0) * 60;\r\n                const seconds = (dateTime.seconds || 0) + minutes * 60;\r\n                timeInMilliseconds = (dateTime.milliseconds || 0) + seconds * 1000;\r\n            } else if (typeof dateTime === 'number') {\r\n                timeInMilliseconds = dateTime;\r\n            }\r\n\r\n            if (isDefined(timeInMilliseconds) && timeInMilliseconds >= 0) {\r\n                return {\r\n                    seconds: Math.round(timeInMilliseconds / 1000),\r\n                };\r\n            }\r\n        } catch {\r\n            // fall through\r\n        }\r\n\r\n        throw new AzFuncSystemError(\r\n            `A 'number' or 'Duration' object was expected instead of a '${typeof dateTime}'. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcHttpData, RpcTypedData } from '@azure/functions-core';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { sendProxyResponse } from '../http/httpProxy';\r\nimport { HttpResponse } from '../http/HttpResponse';\r\nimport { enableHttpStream } from '../setup';\r\nimport { toRpcHttpCookie } from './toRpcHttpCookie';\r\nimport { toRpcTypedData } from './toRpcTypedData';\r\n\r\nexport async function toRpcHttp(invocationId: string, data: unknown): Promise<RpcTypedData | null | undefined> {\r\n    if (data === null || data === undefined) {\r\n        return data;\r\n    } else if (typeof data !== 'object') {\r\n        throw new AzFuncSystemError(\r\n            'The HTTP response must be an object with optional properties \"body\", \"status\", \"headers\", and \"cookies\".'\r\n        );\r\n    }\r\n\r\n    const response = data instanceof HttpResponse ? data : new HttpResponse(data);\r\n    if (enableHttpStream) {\r\n        // send http data over http proxy instead of rpc\r\n        await sendProxyResponse(invocationId, response);\r\n        return;\r\n    }\r\n\r\n    const rpcResponse: RpcHttpData = {};\r\n    rpcResponse.statusCode = response.status.toString();\r\n\r\n    rpcResponse.headers = {};\r\n    for (const [key, value] of response.headers.entries()) {\r\n        rpcResponse.headers[key] = value;\r\n    }\r\n\r\n    rpcResponse.cookies = [];\r\n    for (const cookie of response.cookies) {\r\n        rpcResponse.cookies.push(toRpcHttpCookie(cookie));\r\n    }\r\n\r\n    rpcResponse.enableContentNegotiation = response.enableContentNegotiation;\r\n\r\n    const bodyBytes = await response.arrayBuffer();\r\n    rpcResponse.body = toRpcTypedData(bodyBytes);\r\n\r\n    return { http: rpcResponse };\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Cookie } from '@azure/functions';\r\nimport { RpcHttpCookie, RpcHttpCookieSameSite } from '@azure/functions-core';\r\nimport { toNullableBool, toNullableDouble, toNullableString, toNullableTimestamp, toRpcString } from './toRpcNullable';\r\n\r\n/**\r\n * From RFC specifications for 'Set-Cookie' response header: https://www.rfc-editor.org/rfc/rfc6265.txt\r\n * @param inputCookie\r\n */\r\nexport function toRpcHttpCookie(inputCookie: Cookie): RpcHttpCookie {\r\n    // Resolve RpcHttpCookie.SameSite enum, a one-off\r\n    let rpcSameSite: RpcHttpCookieSameSite = 'none';\r\n    if (inputCookie && inputCookie.sameSite) {\r\n        const sameSite = inputCookie.sameSite.toLocaleLowerCase();\r\n        if (sameSite === 'lax') {\r\n            rpcSameSite = 'lax';\r\n        } else if (sameSite === 'strict') {\r\n            rpcSameSite = 'strict';\r\n        } else if (sameSite === 'none') {\r\n            rpcSameSite = 'explicitNone';\r\n        }\r\n    }\r\n\r\n    const rpcCookie: RpcHttpCookie = {\r\n        name: inputCookie && toRpcString(inputCookie.name, 'cookie.name'),\r\n        value: inputCookie && toRpcString(inputCookie.value, 'cookie.value'),\r\n        domain: toNullableString(inputCookie && inputCookie.domain, 'cookie.domain'),\r\n        path: toNullableString(inputCookie && inputCookie.path, 'cookie.path'),\r\n        expires: toNullableTimestamp(inputCookie && inputCookie.expires, 'cookie.expires'),\r\n        secure: toNullableBool(inputCookie && inputCookie.secure, 'cookie.secure'),\r\n        httpOnly: toNullableBool(inputCookie && inputCookie.httpOnly, 'cookie.httpOnly'),\r\n        sameSite: rpcSameSite,\r\n        maxAge: toNullableDouble(inputCookie && inputCookie.maxAge, 'cookie.maxAge'),\r\n    };\r\n\r\n    return rpcCookie;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcNullableBool, RpcNullableDouble, RpcNullableString, RpcNullableTimestamp } from '@azure/functions-core';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\n/**\r\n * Converts boolean input to an 'INullableBool' to be sent through the RPC layer.\r\n * Input that is not a boolean but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableBool if it is a valid boolean\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableBool(nullable: boolean | undefined, propertyName: string): undefined | RpcNullableBool {\r\n    if (typeof nullable === 'boolean') {\r\n        return <RpcNullableBool>{\r\n            value: nullable,\r\n        };\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'boolean' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts number or string that parses to a number to an 'INullableDouble' to be sent through the RPC layer.\r\n * Input that is not a valid number but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableDouble if it is a valid number\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableDouble(\r\n    nullable: number | string | undefined,\r\n    propertyName: string\r\n): undefined | RpcNullableDouble {\r\n    if (typeof nullable === 'number') {\r\n        return <RpcNullableDouble>{\r\n            value: nullable,\r\n        };\r\n    } else if (typeof nullable === 'string') {\r\n        if (!isNaN(Number(nullable))) {\r\n            const parsedNumber = parseFloat(nullable);\r\n            return <RpcNullableDouble>{\r\n                value: parsedNumber,\r\n            };\r\n        }\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'number' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts string input to an 'INullableString' to be sent through the RPC layer.\r\n * Input that is not a string but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableString if it is a valid string\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toRpcString(nullable: string | undefined, propertyName: string): string {\r\n    if (typeof nullable === 'string') {\r\n        return nullable;\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'string' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\n/**\r\n * Converts string input to an 'INullableString' to be sent through the RPC layer.\r\n * Input that is not a string but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableString if it is a valid string\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableString(nullable: string | undefined, propertyName: string): undefined | RpcNullableString {\r\n    if (typeof nullable === 'string') {\r\n        return <RpcNullableString>{\r\n            value: nullable,\r\n        };\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'string' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts Date or number input to an 'INullableTimestamp' to be sent through the RPC layer.\r\n * Input that is not a Date or number but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableTimestamp if it is valid input\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableTimestamp(\r\n    dateTime: Date | number | undefined,\r\n    propertyName: string\r\n): RpcNullableTimestamp | undefined {\r\n    if (isDefined(dateTime)) {\r\n        try {\r\n            const timeInMilliseconds = typeof dateTime === 'number' ? dateTime : dateTime.getTime();\r\n\r\n            if (timeInMilliseconds && timeInMilliseconds >= 0) {\r\n                return {\r\n                    value: {\r\n                        seconds: Math.round(timeInMilliseconds / 1000),\r\n                    },\r\n                };\r\n            }\r\n        } catch {\r\n            throw new AzFuncSystemError(\r\n                `A 'number' or 'Date' input was expected instead of a '${typeof dateTime}'. Cannot parse value of '${propertyName}'.`\r\n            );\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcTypedData } from '@azure/functions-core';\r\n\r\nexport function toRpcTypedData(data: unknown): RpcTypedData | null | undefined {\r\n    if (data === null || data === undefined) {\r\n        return data;\r\n    } else if (typeof data === 'string') {\r\n        return { string: data };\r\n    } else if (Buffer.isBuffer(data)) {\r\n        return { bytes: data };\r\n    } else if (ArrayBuffer.isView(data)) {\r\n        const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n        return { bytes: bytes };\r\n    } else if (data instanceof ArrayBuffer) {\r\n        const bytes = new Uint8Array(data);\r\n        return { bytes: bytes };\r\n    } else if (typeof data === 'number') {\r\n        if (Number.isInteger(data)) {\r\n            return { int: data };\r\n        } else {\r\n            return { double: data };\r\n        }\r\n    } else {\r\n        return { json: JSON.stringify(data) };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport interface AzFuncError {\r\n    /**\r\n     * System errors can be tracked in our telemetry\r\n     * User errors cannot be tracked in our telemetry because they could have user information (users can still track it themselves in their app insights resource)\r\n     */\r\n    isAzureFunctionsSystemError: boolean;\r\n}\r\n\r\nexport class AzFuncSystemError extends Error {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class AzFuncTypeError extends TypeError implements AzFuncError {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class AzFuncRangeError extends RangeError implements AzFuncError {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class ReadOnlyError extends AzFuncTypeError {\r\n    constructor(propertyName: string) {\r\n        super(`Cannot assign to read only property '${propertyName}'`);\r\n    }\r\n}\r\n\r\nexport function ensureErrorType(err: unknown): Error & Partial<AzFuncError> {\r\n    if (err instanceof Error) {\r\n        const writable = Object.getOwnPropertyDescriptor(err, 'message')?.writable;\r\n        if (!writable) {\r\n            // The motivation for this branch can be found in the below issue:\r\n            // https://github.com/Azure/azure-functions-nodejs-library/issues/205\r\n            let readableMessage = err.message;\r\n            Object.defineProperty(err, 'message', {\r\n                get() {\r\n                    return readableMessage;\r\n                },\r\n                set(val: string) {\r\n                    readableMessage = val;\r\n                },\r\n            });\r\n        }\r\n        return err;\r\n    } else {\r\n        let message: string;\r\n        if (err === undefined || err === null) {\r\n            message = 'Unknown error';\r\n        } else if (typeof err === 'string') {\r\n            message = err;\r\n        } else if (typeof err === 'object') {\r\n            message = JSON.stringify(err);\r\n        } else {\r\n            message = String(err);\r\n        }\r\n        return new Error(message);\r\n    }\r\n}\r\n\r\n/**\r\n * This is mostly for callbacks where `null` or `undefined` indicates there is no error\r\n * By contrast, anything thrown/caught is assumed to be an error regardless of what it is\r\n */\r\nexport function isError(err: unknown): boolean {\r\n    return err !== null && err !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class AppStartContext extends HookContext implements types.AppStartContext {}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class AppTerminateContext extends HookContext implements types.AppTerminateContext {}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\n\r\nexport class HookContext implements types.HookContext {\r\n    #init: types.HookContextInit;\r\n\r\n    constructor(init?: types.HookContextInit) {\r\n        this.#init = init ?? {};\r\n        this.#init.hookData ??= {};\r\n    }\r\n\r\n    get hookData(): Record<string, unknown> {\r\n        return nonNullProp(this.#init, 'hookData');\r\n    }\r\n\r\n    set hookData(_value: unknown) {\r\n        throw new ReadOnlyError('hookData');\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { InvocationContext } from '../InvocationContext';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class InvocationHookContext extends HookContext implements types.InvocationHookContext {\r\n    #init: types.InvocationHookContextInit;\r\n\r\n    constructor(init?: types.InvocationHookContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.inputs ??= [];\r\n        this.#init.invocationContext ??= new InvocationContext();\r\n    }\r\n\r\n    get invocationContext(): types.InvocationContext {\r\n        return nonNullProp(this.#init, 'invocationContext');\r\n    }\r\n\r\n    set invocationContext(_value: types.InvocationContext) {\r\n        throw new ReadOnlyError('invocationContext');\r\n    }\r\n\r\n    get inputs(): unknown[] {\r\n        return nonNullProp(this.#init, 'inputs');\r\n    }\r\n\r\n    set inputs(value: unknown[]) {\r\n        this.#init.inputs = value;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class LogHookContext extends HookContext implements types.LogHookContext {\r\n    #init: types.LogHookContextInit;\r\n\r\n    constructor(init?: types.LogHookContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.level ??= 'information';\r\n        this.#init.message ??= 'unknown';\r\n        this.#init.category ??= 'user';\r\n    }\r\n\r\n    get level(): types.LogLevel {\r\n        return nonNullProp(this.#init, 'level');\r\n    }\r\n\r\n    set level(value: types.LogLevel) {\r\n        this.#init.level = value;\r\n    }\r\n\r\n    get message(): string {\r\n        return nonNullProp(this.#init, 'message');\r\n    }\r\n\r\n    set message(value: string) {\r\n        this.#init.message = value;\r\n    }\r\n\r\n    get category(): types.LogCategory {\r\n        return nonNullProp(this.#init, 'category');\r\n    }\r\n\r\n    set category(_value: types.LogCategory) {\r\n        throw new ReadOnlyError('category');\r\n    }\r\n\r\n    get invocationContext(): types.InvocationContext | undefined {\r\n        return this.#init.invocationContext;\r\n    }\r\n\r\n    set invocationContext(_value: types.InvocationContext | undefined) {\r\n        throw new ReadOnlyError('invocationContext');\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { InvocationHookContext } from './InvocationHookContext';\r\n\r\nexport class PostInvocationContext extends InvocationHookContext implements types.PostInvocationContext {\r\n    #init: types.PostInvocationContextInit;\r\n\r\n    constructor(init?: types.PostInvocationContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n    }\r\n\r\n    get result(): unknown {\r\n        return this.#init.result;\r\n    }\r\n\r\n    set result(value: unknown) {\r\n        this.#init.result = value;\r\n    }\r\n\r\n    get error(): unknown {\r\n        return this.#init.error;\r\n    }\r\n\r\n    set error(value: unknown) {\r\n        this.#init.error = value;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { InvocationHookContext } from './InvocationHookContext';\r\n\r\nexport class PreInvocationContext extends InvocationHookContext implements types.PreInvocationContext {\r\n    #init: types.PreInvocationContextInit;\r\n\r\n    constructor(init?: types.PreInvocationContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.functionCallback ??= () => {};\r\n    }\r\n\r\n    get functionHandler(): types.FunctionHandler {\r\n        return nonNullProp(this.#init, 'functionCallback');\r\n    }\r\n\r\n    set functionHandler(value: types.FunctionHandler) {\r\n        this.#init.functionCallback = value;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    AppStartHandler,\r\n    AppTerminateHandler,\r\n    LogHookHandler,\r\n    PostInvocationHandler,\r\n    PreInvocationHandler,\r\n} from '@azure/functions';\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { AzFuncSystemError, ensureErrorType } from '../errors';\r\nimport { Disposable } from '../utils/Disposable';\r\nimport { tryGetCoreApiLazy } from '../utils/tryGetCoreApiLazy';\r\nimport { AppStartContext } from './AppStartContext';\r\nimport { AppTerminateContext } from './AppTerminateContext';\r\nimport { LogHookContext } from './LogHookContext';\r\nimport { PostInvocationContext } from './PostInvocationContext';\r\nimport { PreInvocationContext } from './PreInvocationContext';\r\n\r\nfunction registerHook(hookName: string, callback: coreTypes.HookCallback): coreTypes.Disposable {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            `WARNING: Skipping call to register ${hookName} hook because the \"@azure/functions\" package is in test mode.`\r\n        );\r\n        return new Disposable(() => {\r\n            console.warn(\r\n                `WARNING: Skipping call to dispose ${hookName} hook because the \"@azure/functions\" package is in test mode.`\r\n            );\r\n        });\r\n    } else {\r\n        return coreApi.registerHook(hookName, callback);\r\n    }\r\n}\r\n\r\nexport function appStart(handler: AppStartHandler): Disposable {\r\n    return registerHook('appStart', (coreContext) => {\r\n        return handler(new AppStartContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function appTerminate(handler: AppTerminateHandler): Disposable {\r\n    return registerHook('appTerminate', (coreContext) => {\r\n        return handler(new AppTerminateContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function preInvocation(handler: PreInvocationHandler): Disposable {\r\n    return registerHook('preInvocation', (coreContext) => {\r\n        return handler(new PreInvocationContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function postInvocation(handler: PostInvocationHandler): Disposable {\r\n    return registerHook('postInvocation', (coreContext) => {\r\n        return handler(new PostInvocationContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function log(handler: LogHookHandler): Disposable {\r\n    try {\r\n        return registerHook('log', (coreContext) => {\r\n            return handler(new LogHookContext(coreContext));\r\n        });\r\n    } catch (err) {\r\n        const error = ensureErrorType(err);\r\n        if (error.name === 'RangeError' && error.isAzureFunctionsSystemError) {\r\n            throw new AzFuncSystemError(`Log hooks require Azure Functions Host v4.34 or higher.`);\r\n        } else {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HttpRequestParams, HttpRequestUser } from '@azure/functions';\r\nimport { RpcHttpData, RpcTypedData } from '@azure/functions-core';\r\nimport { Blob } from 'buffer';\r\nimport { IncomingMessage } from 'http';\r\nimport * as stream from 'stream';\r\nimport { ReadableStream } from 'stream/web';\r\nimport { FormData, Headers, HeadersInit, Request as uRequest } from 'undici';\r\nimport { URLSearchParams } from 'url';\r\nimport { fromNullableMapping } from '../converters/fromRpcNullable';\r\nimport { fromRpcTypedData } from '../converters/fromRpcTypedData';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined, nonNullProp } from '../utils/nonNull';\r\nimport { extractHttpUserFromHeaders } from './extractHttpUserFromHeaders';\r\n\r\ninterface InternalHttpRequestInit extends RpcHttpData {\r\n    undiciRequest?: uRequest;\r\n}\r\n\r\nexport class HttpRequest implements types.HttpRequest {\r\n    readonly query: URLSearchParams;\r\n    readonly params: HttpRequestParams;\r\n\r\n    #cachedUser?: HttpRequestUser | null;\r\n    #uReq: uRequest;\r\n    #init: InternalHttpRequestInit;\r\n\r\n    constructor(init: InternalHttpRequestInit) {\r\n        this.#init = init;\r\n\r\n        let uReq = init.undiciRequest;\r\n        if (!uReq) {\r\n            const url = nonNullProp(init, 'url');\r\n\r\n            let body: Buffer | string | undefined;\r\n            if (init.body?.bytes) {\r\n                body = Buffer.from(init.body?.bytes);\r\n            } else if (init.body?.string) {\r\n                body = init.body.string;\r\n            }\r\n\r\n            uReq = new uRequest(url, {\r\n                body,\r\n                method: nonNullProp(init, 'method'),\r\n                headers: fromNullableMapping(init.nullableHeaders, init.headers),\r\n            });\r\n        }\r\n        this.#uReq = uReq;\r\n\r\n        if (init.nullableQuery || init.query) {\r\n            this.query = new URLSearchParams(fromNullableMapping(init.nullableQuery, init.query));\r\n        } else {\r\n            this.query = new URL(this.#uReq.url).searchParams;\r\n        }\r\n\r\n        this.params = fromNullableMapping(init.nullableParams, init.params);\r\n    }\r\n\r\n    get url(): string {\r\n        return this.#uReq.url;\r\n    }\r\n\r\n    get method(): string {\r\n        return this.#uReq.method;\r\n    }\r\n\r\n    get headers(): Headers {\r\n        return this.#uReq.headers;\r\n    }\r\n\r\n    get user(): HttpRequestUser | null {\r\n        if (this.#cachedUser === undefined) {\r\n            this.#cachedUser = extractHttpUserFromHeaders(this.headers);\r\n        }\r\n\r\n        return this.#cachedUser;\r\n    }\r\n\r\n    get body(): ReadableStream<any> | null {\r\n        return this.#uReq.body;\r\n    }\r\n\r\n    get bodyUsed(): boolean {\r\n        return this.#uReq.bodyUsed;\r\n    }\r\n\r\n    async arrayBuffer(): Promise<ArrayBuffer> {\r\n        return this.#uReq.arrayBuffer();\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return this.#uReq.blob();\r\n    }\r\n\r\n    async formData(): Promise<FormData> {\r\n        return this.#uReq.formData();\r\n    }\r\n\r\n    async json(): Promise<unknown> {\r\n        return this.#uReq.json();\r\n    }\r\n\r\n    async text(): Promise<string> {\r\n        return this.#uReq.text();\r\n    }\r\n\r\n    clone(): HttpRequest {\r\n        const newInit = structuredClone(this.#init);\r\n        newInit.undiciRequest = this.#uReq.clone();\r\n        return new HttpRequest(newInit);\r\n    }\r\n}\r\n\r\nexport function createStreamRequest(\r\n    proxyReq: IncomingMessage,\r\n    triggerMetadata: Record<string, RpcTypedData>\r\n): HttpRequest {\r\n    const hostHeaderName = 'x-forwarded-host';\r\n    const protoHeaderName = 'x-forwarded-proto';\r\n    const host = proxyReq.headers[hostHeaderName];\r\n    const proto = proxyReq.headers[protoHeaderName];\r\n    if (typeof host !== 'string' || typeof proto !== 'string') {\r\n        throw new AzFuncSystemError(`Expected headers \"${hostHeaderName}\" and \"${protoHeaderName}\" to be set.`);\r\n    }\r\n    const url = `${proto}://${host}${nonNullProp(proxyReq, 'url')}`;\r\n\r\n    let body: stream.Readable | undefined;\r\n    const lowerMethod = proxyReq.method?.toLowerCase();\r\n    if (lowerMethod !== 'get' && lowerMethod !== 'head') {\r\n        body = proxyReq;\r\n    }\r\n\r\n    // Get headers and params from trigger metadata\r\n    // See here for more info: https://github.com/Azure/azure-functions-host/issues/9840\r\n    // NOTE: We ignore query info because it has this bug: https://github.com/Azure/azure-functions-nodejs-library/issues/168\r\n    const { Query: rpcQueryIgnored, Headers: rpcHeaders, ...rpcParams } = triggerMetadata;\r\n\r\n    let headers: HeadersInit | undefined;\r\n    const headersData = fromRpcTypedData(rpcHeaders);\r\n    if (typeof headersData === 'object' && isDefined(headersData)) {\r\n        headers = <HeadersInit>headersData;\r\n    }\r\n\r\n    const uReq = new uRequest(url, {\r\n        body,\r\n        duplex: 'half',\r\n        method: nonNullProp(proxyReq, 'method'),\r\n        headers,\r\n    });\r\n\r\n    const params: Record<string, string> = {};\r\n    for (const [key, rpcValue] of Object.entries(rpcParams)) {\r\n        const value = fromRpcTypedData(rpcValue);\r\n        if (typeof value === 'string') {\r\n            params[key] = value;\r\n        }\r\n    }\r\n\r\n    return new HttpRequest({\r\n        undiciRequest: uReq,\r\n        params,\r\n    });\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HttpResponseInit } from '@azure/functions';\r\nimport { Blob } from 'buffer';\r\nimport { ReadableStream } from 'stream/web';\r\nimport { FormData, Headers, Response as uResponse, ResponseInit as uResponseInit } from 'undici';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\ninterface InternalHttpResponseInit extends HttpResponseInit {\r\n    undiciResponse?: uResponse;\r\n}\r\n\r\nexport class HttpResponse implements types.HttpResponse {\r\n    readonly cookies: types.Cookie[];\r\n    readonly enableContentNegotiation: boolean;\r\n\r\n    #uRes: uResponse;\r\n    #init: InternalHttpResponseInit;\r\n\r\n    constructor(init?: InternalHttpResponseInit) {\r\n        init ??= {};\r\n        this.#init = init;\r\n\r\n        if (init.undiciResponse) {\r\n            this.#uRes = init.undiciResponse;\r\n        } else {\r\n            const uResInit: uResponseInit = { status: init.status, headers: init.headers };\r\n            if (isDefined(init.jsonBody)) {\r\n                this.#uRes = uResponse.json(init.jsonBody, uResInit);\r\n            } else {\r\n                this.#uRes = new uResponse(init.body, uResInit);\r\n            }\r\n        }\r\n\r\n        this.cookies = init.cookies ?? [];\r\n        this.enableContentNegotiation = !!init.enableContentNegotiation;\r\n    }\r\n\r\n    get status(): number {\r\n        return this.#uRes.status;\r\n    }\r\n\r\n    get headers(): Headers {\r\n        return this.#uRes.headers;\r\n    }\r\n\r\n    get body(): ReadableStream<any> | null {\r\n        return this.#uRes.body;\r\n    }\r\n\r\n    get bodyUsed(): boolean {\r\n        return this.#uRes.bodyUsed;\r\n    }\r\n\r\n    async arrayBuffer(): Promise<ArrayBuffer> {\r\n        return this.#uRes.arrayBuffer();\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return this.#uRes.blob();\r\n    }\r\n\r\n    async formData(): Promise<FormData> {\r\n        return this.#uRes.formData();\r\n    }\r\n\r\n    async json(): Promise<unknown> {\r\n        return this.#uRes.json();\r\n    }\r\n\r\n    async text(): Promise<string> {\r\n        return this.#uRes.text();\r\n    }\r\n\r\n    clone(): HttpResponse {\r\n        const newInit = structuredClone(this.#init);\r\n        newInit.undiciResponse = this.#uRes.clone();\r\n        return new HttpResponse(newInit);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { HttpRequestUser } from '@azure/functions';\r\nimport { Headers } from 'undici';\r\nimport { nonNullValue } from '../utils/nonNull';\r\n\r\n/* grandfathered in. Should fix when possible */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access */\r\n\r\nexport function extractHttpUserFromHeaders(headers: Headers): HttpRequestUser | null {\r\n    let user: HttpRequestUser | null = null;\r\n\r\n    const clientPrincipal = headers.get('x-ms-client-principal');\r\n    if (clientPrincipal) {\r\n        const claimsPrincipalData = JSON.parse(Buffer.from(clientPrincipal, 'base64').toString('utf-8'));\r\n\r\n        if (claimsPrincipalData['identityProvider']) {\r\n            user = {\r\n                type: 'StaticWebApps',\r\n                id: claimsPrincipalData['userId'],\r\n                username: claimsPrincipalData['userDetails'],\r\n                identityProvider: claimsPrincipalData['identityProvider'],\r\n                claimsPrincipalData,\r\n            };\r\n        } else {\r\n            user = {\r\n                type: 'AppService',\r\n                id: nonNullValue(headers.get('x-ms-client-principal-id'), 'user-id'),\r\n                username: nonNullValue(headers.get('x-ms-client-principal-name'), 'user-name'),\r\n                identityProvider: nonNullValue(headers.get('x-ms-client-principal-idp'), 'user-idp'),\r\n                claimsPrincipalData,\r\n            };\r\n        }\r\n    }\r\n\r\n    return user;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { serialize as serializeCookie } from 'cookie';\r\nimport { EventEmitter } from 'events';\r\nimport * as http from 'http';\r\nimport { AzFuncSystemError, ensureErrorType } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { workerSystemLog } from '../utils/workerSystemLog';\r\nimport { HttpResponse } from './HttpResponse';\r\n\r\nconst requests: Record<string, http.IncomingMessage> = {};\r\nconst responses: Record<string, http.ServerResponse> = {};\r\n\r\nconst invocRequestEmitter = new EventEmitter();\r\n\r\nexport async function waitForProxyRequest(invocationId: string): Promise<http.IncomingMessage> {\r\n    return new Promise((resolve, _reject) => {\r\n        const req = requests[invocationId];\r\n        if (req) {\r\n            resolve(req);\r\n            delete requests[invocationId];\r\n        } else {\r\n            invocRequestEmitter.once(invocationId, () => {\r\n                const req = requests[invocationId];\r\n                if (req) {\r\n                    resolve(req);\r\n                    delete requests[invocationId];\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nconst invocationIdHeader = 'x-ms-invocation-id';\r\nexport async function sendProxyResponse(invocationId: string, userRes: HttpResponse): Promise<void> {\r\n    const proxyRes = nonNullProp(responses, invocationId);\r\n    delete responses[invocationId];\r\n    for (const [key, val] of userRes.headers.entries()) {\r\n        proxyRes.setHeader(key, val);\r\n    }\r\n    proxyRes.setHeader(invocationIdHeader, invocationId);\r\n    proxyRes.statusCode = userRes.status;\r\n\r\n    if (userRes.cookies.length > 0) {\r\n        setCookies(userRes, proxyRes);\r\n    }\r\n\r\n    if (userRes.body) {\r\n        for await (const chunk of userRes.body.values()) {\r\n            proxyRes.write(chunk);\r\n        }\r\n    }\r\n    proxyRes.end();\r\n}\r\n\r\nfunction setCookies(userRes: HttpResponse, proxyRes: http.ServerResponse): void {\r\n    const serializedCookies: string[] = userRes.cookies.map((c) => {\r\n        let sameSite: true | false | 'lax' | 'strict' | 'none' | undefined;\r\n        switch (c.sameSite) {\r\n            case 'Lax':\r\n                sameSite = 'lax';\r\n                break;\r\n            case 'None':\r\n                sameSite = 'none';\r\n                break;\r\n            case 'Strict':\r\n                sameSite = 'strict';\r\n                break;\r\n            default:\r\n                sameSite = c.sameSite;\r\n        }\r\n        return serializeCookie(c.name, c.value, {\r\n            domain: c.domain,\r\n            path: c.path,\r\n            expires: typeof c.expires === 'number' ? new Date(c.expires) : c.expires,\r\n            secure: c.secure,\r\n            httpOnly: c.httpOnly,\r\n            sameSite: sameSite,\r\n            maxAge: c.maxAge,\r\n        });\r\n    });\r\n    proxyRes.setHeader('Set-Cookie', serializedCookies);\r\n}\r\n\r\nexport async function setupHttpProxy(): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n        const server = http.createServer();\r\n\r\n        server.on('request', (req, res) => {\r\n            const invocationId = req.headers[invocationIdHeader];\r\n            if (typeof invocationId === 'string') {\r\n                requests[invocationId] = req;\r\n                responses[invocationId] = res;\r\n                invocRequestEmitter.emit(invocationId);\r\n            } else {\r\n                workerSystemLog('error', `Http proxy request missing header ${invocationIdHeader}`);\r\n            }\r\n        });\r\n\r\n        server.on('error', (err) => {\r\n            err = ensureErrorType(err);\r\n            workerSystemLog('error', `Http proxy error: ${err.stack || err.message}`);\r\n        });\r\n\r\n        server.listen(() => {\r\n            const address = server.address();\r\n            if (address !== null && typeof address === 'object') {\r\n                resolve(`http://localhost:${address.port}/`);\r\n            } else {\r\n                reject(new AzFuncSystemError('Unexpected server address during http proxy setup'));\r\n            }\r\n        });\r\n\r\n        server.on('close', () => {\r\n            workerSystemLog('information', 'Http proxy closing');\r\n        });\r\n    });\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport * as app from './app';\r\nexport { AppStartContext } from './hooks/AppStartContext';\r\nexport { AppTerminateContext } from './hooks/AppTerminateContext';\r\nexport { HookContext } from './hooks/HookContext';\r\nexport { InvocationHookContext } from './hooks/InvocationHookContext';\r\nexport { PostInvocationContext } from './hooks/PostInvocationContext';\r\nexport { PreInvocationContext } from './hooks/PreInvocationContext';\r\nexport { HttpRequest } from './http/HttpRequest';\r\nexport { HttpResponse } from './http/HttpResponse';\r\nexport * as input from './input';\r\nexport { InvocationContext } from './InvocationContext';\r\nexport * as output from './output';\r\nexport * as trigger from './trigger';\r\nexport { Disposable } from './utils/Disposable';\r\n\r\nexport enum SqlChangeOperation {\r\n    Insert = 0,\r\n    Update = 1,\r\n    Delete = 2,\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBInput,\r\n    CosmosDBInputOptions,\r\n    FunctionInput,\r\n    GenericInputOptions,\r\n    SqlInput,\r\n    SqlInputOptions,\r\n    StorageBlobInput,\r\n    StorageBlobInputOptions,\r\n    TableInput,\r\n    TableInputOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function storageBlob(options: StorageBlobInputOptions): StorageBlobInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'blob',\r\n    });\r\n}\r\n\r\nexport function table(options: TableInputOptions): TableInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'table',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBInputOptions): CosmosDBInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'cosmosDB',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlInputOptions): SqlInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'sql',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericInputOptions): FunctionInput {\r\n    return addInputBindingName(options);\r\n}\r\n\r\nfunction addInputBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Input');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBOutput,\r\n    CosmosDBOutputOptions,\r\n    EventGridOutput,\r\n    EventGridOutputOptions,\r\n    EventHubOutput,\r\n    EventHubOutputOptions,\r\n    FunctionOutput,\r\n    GenericOutputOptions,\r\n    HttpOutput,\r\n    HttpOutputOptions,\r\n    ServiceBusQueueOutput,\r\n    ServiceBusQueueOutputOptions,\r\n    ServiceBusTopicOutput,\r\n    ServiceBusTopicOutputOptions,\r\n    SqlOutput,\r\n    SqlOutputOptions,\r\n    StorageBlobOutput,\r\n    StorageBlobOutputOptions,\r\n    StorageQueueOutput,\r\n    StorageQueueOutputOptions,\r\n    TableOutput,\r\n    TableOutputOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function http(options: HttpOutputOptions): HttpOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'http',\r\n    });\r\n}\r\n\r\nexport function storageBlob(options: StorageBlobOutputOptions): StorageBlobOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'blob',\r\n    });\r\n}\r\n\r\nexport function table(options: TableOutputOptions): TableOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'table',\r\n    });\r\n}\r\n\r\nexport function storageQueue(options: StorageQueueOutputOptions): StorageQueueOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'queue',\r\n    });\r\n}\r\n\r\nexport function serviceBusQueue(options: ServiceBusQueueOutputOptions): ServiceBusQueueOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'serviceBus',\r\n    });\r\n}\r\n\r\nexport function serviceBusTopic(options: ServiceBusTopicOutputOptions): ServiceBusTopicOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'serviceBus',\r\n    });\r\n}\r\n\r\nexport function eventHub(options: EventHubOutputOptions): EventHubOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'eventHub',\r\n    });\r\n}\r\n\r\nexport function eventGrid(options: EventGridOutputOptions): EventGridOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'eventGrid',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBOutputOptions): CosmosDBOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'cosmosDB',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlOutputOptions): SqlOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'sql',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericOutputOptions): FunctionOutput {\r\n    return addOutputBindingName(options);\r\n}\r\n\r\nfunction addOutputBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Output');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { SetupOptions } from '../types';\r\nimport { AzFuncSystemError } from './errors';\r\nimport { isDefined } from './utils/nonNull';\r\nimport { tryGetCoreApiLazy } from './utils/tryGetCoreApiLazy';\r\nimport { workerSystemLog } from './utils/workerSystemLog';\r\n\r\nlet setupLocked = false;\r\nexport function lockSetup(): void {\r\n    setupLocked = true;\r\n}\r\n\r\nexport let enableHttpStream = false;\r\nexport const capabilities: Record<string, string> = {};\r\n\r\nexport function setup(opts: SetupOptions): void {\r\n    if (setupLocked) {\r\n        throw new AzFuncSystemError(\"Setup options can't be changed after app startup has finished.\");\r\n    }\r\n\r\n    if (opts.enableHttpStream) {\r\n        // NOTE: coreApi.log was coincidentally added the same time as http streaming,\r\n        // so we can use that to validate the host version instead of messing with semver parsing\r\n        const coreApi = tryGetCoreApiLazy();\r\n        if (coreApi && !coreApi.log) {\r\n            throw new AzFuncSystemError(`HTTP streaming requires Azure Functions Host v4.28 or higher.`);\r\n        }\r\n    }\r\n\r\n    if (isDefined(opts.enableHttpStream)) {\r\n        enableHttpStream = opts.enableHttpStream;\r\n    }\r\n\r\n    if (opts.capabilities) {\r\n        for (let [key, val] of Object.entries(opts.capabilities)) {\r\n            if (isDefined(val)) {\r\n                val = String(val);\r\n                workerSystemLog('debug', `Capability ${key} set to ${val}.`);\r\n                capabilities[key] = val;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (enableHttpStream) {\r\n        workerSystemLog('debug', `HTTP streaming enabled.`);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBTrigger,\r\n    CosmosDBTriggerOptions,\r\n    EventGridTrigger,\r\n    EventGridTriggerOptions,\r\n    EventHubTrigger,\r\n    EventHubTriggerOptions,\r\n    FunctionTrigger,\r\n    GenericTriggerOptions,\r\n    HttpTrigger,\r\n    HttpTriggerOptions,\r\n    ServiceBusQueueTrigger,\r\n    ServiceBusQueueTriggerOptions,\r\n    ServiceBusTopicTrigger,\r\n    ServiceBusTopicTriggerOptions,\r\n    SqlTrigger,\r\n    SqlTriggerOptions,\r\n    StorageBlobTrigger,\r\n    StorageBlobTriggerOptions,\r\n    StorageQueueTrigger,\r\n    StorageQueueTriggerOptions,\r\n    TimerTrigger,\r\n    TimerTriggerOptions,\r\n    WarmupTrigger,\r\n    WarmupTriggerOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function http(options: HttpTriggerOptions): HttpTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        authLevel: options.authLevel || 'anonymous',\r\n        methods: options.methods || ['GET', 'POST'],\r\n        type: 'httpTrigger',\r\n    });\r\n}\r\n\r\nexport function timer(options: TimerTriggerOptions): TimerTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'timerTrigger',\r\n    });\r\n}\r\n\r\nexport function storageBlob(options: StorageBlobTriggerOptions): StorageBlobTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'blobTrigger',\r\n    });\r\n}\r\n\r\nexport function storageQueue(options: StorageQueueTriggerOptions): StorageQueueTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'queueTrigger',\r\n    });\r\n}\r\n\r\nexport function serviceBusQueue(options: ServiceBusQueueTriggerOptions): ServiceBusQueueTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'serviceBusTrigger',\r\n    });\r\n}\r\n\r\nexport function serviceBusTopic(options: ServiceBusTopicTriggerOptions): ServiceBusTopicTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'serviceBusTrigger',\r\n    });\r\n}\r\n\r\nexport function eventHub(options: EventHubTriggerOptions): EventHubTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'eventHubTrigger',\r\n    });\r\n}\r\n\r\nexport function eventGrid(options: EventGridTriggerOptions): EventGridTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'eventGridTrigger',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBTriggerOptions): CosmosDBTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'cosmosDBTrigger',\r\n    });\r\n}\r\n\r\nexport function warmup(options: WarmupTriggerOptions): WarmupTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'warmupTrigger',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlTriggerOptions): SqlTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'sqlTrigger',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericTriggerOptions): FunctionTrigger {\r\n    return addTriggerBindingName(options);\r\n}\r\n\r\nfunction addTriggerBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Trigger');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Based off of VS Code\r\n * https://github.com/microsoft/vscode/blob/7bed4ce3e9f5059b5fc638c348f064edabcce5d2/src/vs/workbench/api/common/extHostTypes.ts#L65\r\n */\r\nexport class Disposable {\r\n    static from(...inDisposables: { dispose(): any }[]): Disposable {\r\n        let disposables: ReadonlyArray<{ dispose(): any }> | undefined = inDisposables;\r\n        return new Disposable(function () {\r\n            if (disposables) {\r\n                for (const disposable of disposables) {\r\n                    if (disposable && typeof disposable.dispose === 'function') {\r\n                        disposable.dispose();\r\n                    }\r\n                }\r\n                disposables = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    #callOnDispose?: () => any;\r\n\r\n    constructor(callOnDispose: () => any) {\r\n        this.#callOnDispose = callOnDispose;\r\n    }\r\n\r\n    dispose(): any {\r\n        if (typeof this.#callOnDispose === 'function') {\r\n            this.#callOnDispose();\r\n            this.#callOnDispose = undefined;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\n\r\nexport function fallbackLogHandler(level: types.LogLevel, ...args: unknown[]): void {\r\n    switch (level) {\r\n        case 'trace':\r\n            console.trace(...args);\r\n            break;\r\n        case 'debug':\r\n            console.debug(...args);\r\n            break;\r\n        case 'information':\r\n            console.info(...args);\r\n            break;\r\n        case 'warning':\r\n            console.warn(...args);\r\n            break;\r\n        case 'critical':\r\n        case 'error':\r\n            console.error(...args);\r\n            break;\r\n        default:\r\n            console.log(...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as crypto from 'crypto';\r\n\r\nexport function getRandomHexString(length = 10): string {\r\n    const buffer: Buffer = crypto.randomBytes(Math.ceil(length / 2));\r\n    return buffer.toString('hex').slice(0, length);\r\n}\r\n\r\nexport function getStringHash(data: string, length = 10): string {\r\n    return crypto.createHash('sha256').update(data).digest('hex').slice(0, length);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function isTrigger(typeName: string | undefined | null): boolean {\r\n    return !!typeName && /trigger$/i.test(typeName);\r\n}\r\n\r\nexport function isHttpTrigger(typeName: string | undefined | null): boolean {\r\n    return typeName?.toLowerCase() === 'httptrigger';\r\n}\r\n\r\nexport function isTimerTrigger(typeName: string | undefined | null): boolean {\r\n    return typeName?.toLowerCase() === 'timertrigger';\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { AzFuncSystemError } from '../errors';\r\n\r\n/**\r\n * Retrieves a property by name from an object and checks that it's not null and not undefined.  It is strongly typed\r\n * for the property and will give a compile error if the given name is not a property of the source.\r\n */\r\nexport function nonNullProp<TSource, TKey extends keyof TSource>(\r\n    source: TSource,\r\n    name: TKey\r\n): NonNullable<TSource[TKey]> {\r\n    const value: NonNullable<TSource[TKey]> = <NonNullable<TSource[TKey]>>source[name];\r\n    return nonNullValue(value, <string>name);\r\n}\r\n\r\n/**\r\n * Validates that a given value is not null and not undefined.\r\n */\r\nexport function nonNullValue<T>(value: T | undefined | null, propertyNameOrMessage?: string): T {\r\n    if (value === null || value === undefined) {\r\n        throw new AzFuncSystemError(\r\n            'Internal error: Expected value to be neither null nor undefined' +\r\n                (propertyNameOrMessage ? `: ${propertyNameOrMessage}` : '')\r\n        );\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport function copyPropIfDefined<TData, TKey extends keyof TData>(source: TData, destination: TData, key: TKey): void {\r\n    if (source[key] !== null && source[key] !== undefined) {\r\n        destination[key] = source[key];\r\n    }\r\n}\r\n\r\nexport function isDefined<T>(data: T | undefined | null): data is T {\r\n    return data !== null && data !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\n\r\nlet coreApi: typeof coreTypes | undefined | null;\r\nexport function tryGetCoreApiLazy(): typeof coreTypes | null {\r\n    if (coreApi === undefined) {\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            coreApi = <typeof coreTypes>require('@azure/functions-core');\r\n        } catch {\r\n            coreApi = null;\r\n        }\r\n    }\r\n    return coreApi;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { format } from 'util';\r\nimport { fallbackLogHandler } from './fallbackLogHandler';\r\nimport { tryGetCoreApiLazy } from './tryGetCoreApiLazy';\r\n\r\nexport function workerSystemLog(level: types.LogLevel, ...args: unknown[]): void {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    // NOTE: coreApi.log doesn't exist on older versions of the worker\r\n    if (coreApi && coreApi.log) {\r\n        coreApi.log(level, 'system', format(...args));\r\n    } else {\r\n        fallbackLogHandler(level, ...args);\r\n    }\r\n}\r\n","module.exports = require(\"@azure/functions-core\");","module.exports = require(\"cookie\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"http\");","module.exports = require(\"undici\");","module.exports = require(\"url\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(3607);\n"],"names":["constructor","init","fallbackString","this","invocationId","functionName","extraInputs","InvocationContextExtraInputs","extraOutputs","InvocationContextExtraOutputs","retryContext","traceContext","triggerMetadata","options","trigger","name","type","return","logHandler","fallbackLogHandler","log","args","trace","debug","info","warn","error","get","inputOrName","set","value","outputOrName","coreCtx","nonNullProp","metadata","triggerBinding","nonNullValue","Object","values","find","b","isTrigger","getArguments","req","request","context","InvocationContext","level","fromRpcRetryContext","fromRpcTraceContext","fromRpcTriggerMetadata","fromRpcBindings","inputs","inputData","binding","bindingName","rpcBinding","AzFuncSystemError","keys","join","bindingType","input","isHttpTrigger","enableHttpStream","proxyRequest","waitForProxyRequest","createStreamRequest","fromRpcTypedData","data","isTimerTrigger","toCamelCaseValue","push","invokeFunction","handler","Promise","resolve","getResponse","result","response","usedReturnValue","entries","direction","returnBindingKey","returnValue","outputValue","isDefined","outputData","toRpcTypedData","toLowerCase","toRpcHttp","logCategory","format","state","badAsyncMsg","version","getInvocationModel","InvocationModel","getCapabilities","workerCapabilities","lockSetup","httpUri","setupHttpProxy","HttpUri","assign","suffix","endsWith","getStringHash","JSON","stringify","setup","hasSetModel","convertToHttpOptions","optionsOrHandler","method","methods","convertToGenericOptions","triggerMethod","ret","retry","triggerOptions","http","output","generic","coreApi","tryGetCoreApiLazy","setProgrammingModel","ProgrammingModel","console","registerFunction","toCoreFunctionMetadata","timer","storageBlob","storageQueue","serviceBusQueue","serviceBusTopic","eventHub","eventGrid","cosmosDB","warmup","sql","fromRpcBinding","bindings","returnBinding","retryCount","maxRetryCount","exception","copyPropIfDefined","fromRpcException","attributes","nullableMapping","originalMapping","converted","length","key","triggerType","toCamelCaseKey","tryJsonParse","parse","string","json","bytes","Buffer","from","stream","HttpRequest","int","double","collectionBytes","map","d","collectionString","collectionDouble","collectionSint64","sint64","charAt","slice","Array","isArray","bindingNames","filter","v","i","indexOf","retryOptions","retryStrategy","strategy","delayInterval","toRpcDuration","maximumInterval","minimumInterval","dateTime","propertyName","timeInMilliseconds","minutes","hours","seconds","milliseconds","Math","round","HttpResponse","sendProxyResponse","rpcResponse","statusCode","status","toString","headers","cookies","cookie","toRpcHttpCookie","enableContentNegotiation","bodyBytes","arrayBuffer","body","inputCookie","rpcSameSite","sameSite","toLocaleLowerCase","toRpcString","domain","toNullableString","path","expires","toNullableTimestamp","secure","toNullableBool","httpOnly","maxAge","toNullableDouble","nullable","isNaN","Number","parseFloat","getTime","isBuffer","ArrayBuffer","isView","Uint8Array","buffer","byteOffset","byteLength","isInteger","Error","isAzureFunctionsSystemError","AzFuncTypeError","TypeError","AzFuncRangeError","RangeError","super","err","getOwnPropertyDescriptor","writable","readableMessage","message","defineProperty","val","String","AppStartContext","HookContext","AppTerminateContext","hookData","_value","ReadOnlyError","InvocationHookContext","invocationContext","LogHookContext","category","PostInvocationContext","PreInvocationContext","functionCallback","functionHandler","registerHook","hookName","callback","Disposable","coreContext","ensureErrorType","uReq","undiciRequest","url","fromNullableMapping","nullableHeaders","nullableQuery","query","URLSearchParams","URL","searchParams","params","nullableParams","user","undefined","extractHttpUserFromHeaders","bodyUsed","blob","formData","text","clone","newInit","structuredClone","proxyReq","hostHeaderName","protoHeaderName","host","proto","lowerMethod","Query","rpcQueryIgnored","Headers","rpcHeaders","rpcParams","headersData","duplex","rpcValue","undiciResponse","uResInit","jsonBody","clientPrincipal","claimsPrincipalData","id","username","identityProvider","requests","responses","invocRequestEmitter","EventEmitter","_reject","once","invocationIdHeader","userRes","proxyRes","setHeader","serializedCookies","c","serialize","Date","setCookies","chunk","write","end","reject","server","createServer","on","res","emit","workerSystemLog","stack","listen","address","port","SqlChangeOperation","addInputBindingName","addBindingName","addOutputBindingName","setupLocked","capabilities","opts","addTriggerBindingName","authLevel","callOnDispose","inDisposables","disposables","disposable","dispose","crypto","randomBytes","ceil","createHash","update","digest","typeName","test","propertyNameOrMessage","source","destination","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}